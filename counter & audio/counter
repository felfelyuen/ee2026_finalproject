`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2025/03/18 21:56:31
// Design Name: 
// Module Name: count_down
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module count_down (input clk, output reg[7:0]seg , output reg [3:0]ano,input reset, output reg lose );
    reg [2:0]count = 3'd0;
    wire slow_clk_1hz;
    wire slow_clk_400hz;
    reg [8:0] counter = 8'd199;
    reg [3:0]digit;
    
   
    reg [3:0] hundrads,singles,tens;
    flexible_clock_divider f0 (.basys_clk(clk),.m(30'd50000000),.slow_clk(slow_clk_1hz));
    flexible_clock_divider f1 (.basys_clk(clk),.m(30'd125000),.slow_clk(slow_clk_400hz));

    initial begin
    lose = 0;
    end
    always @(posedge slow_clk_1hz or posedge reset) begin
        if (reset) begin
            counter <= 8'd199;
        end else begin
            if (counter < 8'd200 && counter > 8'd0) begin
                counter <= counter - 1;
            end else if (counter == 8'd0) begin
                lose <= 1;
            end else begin
                counter <=8'd199;
            end 
        
        end
        hundrads <= counter / 8'd100;
        tens <= (counter / 4'd10 ) % 4'd10;
        singles <= counter % 4'd10;      
    end
    always @(posedge slow_clk_400hz)begin
        if (count == 3) begin
            count <= 0;
        end else begin
            count <= count + 1;
        end
        case(count)
            3'd0:begin ano <= 4'b1011;digit <= singles;end
            3'd1:begin ano <= 4'b1110;digit <= tens; end
            3'd2:begin ano <= 4'b1101; digit <= hundrads; end
            3'd3:ano <= 4'b1111;
        endcase
        case (digit)
                    4'd0: seg <= 8'b11000000;  // "0"
                    4'd1: seg <= 8'b11111001;  // "1"
                    4'd2: seg <= 8'b10100100;  // "2"
                    4'd3: seg <= 8'b10110000;  // "3"
                    4'd4: seg <= 8'b10011001;  // "4"
                    4'd5: seg <= 8'b10010010;  // "5"
                    4'd6: seg <= 8'b10000010;  // "6"
                    4'd7: seg <= 8'b11111000;  // "7"
                    4'd8: seg <= 8'b10000000;  // "8"
                    4'd9: seg <= 8'b10010000;  // "9"
                    default: seg <= 8'b11111111; // ??
                endcase
    end

endmodule
