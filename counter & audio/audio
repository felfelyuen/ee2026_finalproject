module audio_gen_bomb (
    input wire clk,          
    input wire [1:0] sw,     //win/lose one-hot input
    
    output wire pwm_out,     // PWM output
    output wire gain,        
    output wire shutdown_n   
);
    // --- Sample Rate Generator (16kHz) ---
reg reset = 0;
wire sample_tick;
        flexible_clock_divider sample_clk_gen (
            .basys_clock(clk),
            .m(32'd3124),        // m = 3,124 for 16 kHz
            .my_slow_clock(sample_tick)
        );

    // --- Sine Lookup Table (256 values) ---
    reg [7:0] sin_lut[0:255];
    initial begin
        sin_lut[0] = 8'h80; sin_lut[1] = 8'h83; sin_lut[2] = 8'h86; sin_lut[3] = 8'h89;
        sin_lut[4] = 8'h8C; sin_lut[5] = 8'h8F; sin_lut[6] = 8'h92; sin_lut[7] = 8'h95;
        sin_lut[8] = 8'h98; sin_lut[9] = 8'h9B; sin_lut[10] = 8'h9E; sin_lut[11] = 8'hA1;
        sin_lut[12] = 8'hA4; sin_lut[13] = 8'hA7; sin_lut[14] = 8'hAA; sin_lut[15] = 8'hAD;
        sin_lut[16] = 8'hB0; sin_lut[17] = 8'hB3; sin_lut[18] = 8'hB6; sin_lut[19] = 8'hB9;
        sin_lut[20] = 8'hBB; sin_lut[21] = 8'hBE; sin_lut[22] = 8'hC1; sin_lut[23] = 8'hC3;
        sin_lut[24] = 8'hC6; sin_lut[25] = 8'hC9; sin_lut[26] = 8'hCB; sin_lut[27] = 8'hCE;
        sin_lut[28] = 8'hD0; sin_lut[29] = 8'hD2; sin_lut[30] = 8'hD5; sin_lut[31] = 8'hD7;
        sin_lut[32] = 8'hD9; sin_lut[33] = 8'hDB; sin_lut[34] = 8'hDE; sin_lut[35] = 8'hE0;
        sin_lut[36] = 8'hE2; sin_lut[37] = 8'hE4; sin_lut[38] = 8'hE6; sin_lut[39] = 8'hE7;
        sin_lut[40] = 8'hE9; sin_lut[41] = 8'hEB; sin_lut[42] = 8'hEC; sin_lut[43] = 8'hEE;
        sin_lut[44] = 8'hF0; sin_lut[45] = 8'hF1; sin_lut[46] = 8'hF2; sin_lut[47] = 8'hF4;
        sin_lut[48] = 8'hF5; sin_lut[49] = 8'hF6; sin_lut[50] = 8'hF7; sin_lut[51] = 8'hF8;
        sin_lut[52] = 8'hF9; sin_lut[53] = 8'hFA; sin_lut[54] = 8'hFB; sin_lut[55] = 8'hFB;
        sin_lut[56] = 8'hFC; sin_lut[57] = 8'hFD; sin_lut[58] = 8'hFD; sin_lut[59] = 8'hFE;
        sin_lut[60] = 8'hFE; sin_lut[61] = 8'hFE; sin_lut[62] = 8'hFE; sin_lut[63] = 8'hFE;
        sin_lut[64] = 8'hFF; sin_lut[65] = 8'hFE; sin_lut[66] = 8'hFE; sin_lut[67] = 8'hFE;
        sin_lut[68] = 8'hFE; sin_lut[69] = 8'hFE; sin_lut[70] = 8'hFD; sin_lut[71] = 8'hFD;
        sin_lut[72] = 8'hFC; sin_lut[73] = 8'hFB; sin_lut[74] = 8'hFB; sin_lut[75] = 8'hFA;
        sin_lut[76] = 8'hF9; sin_lut[77] = 8'hF8; sin_lut[78] = 8'hF7; sin_lut[79] = 8'hF6;
        sin_lut[80] = 8'hF5; sin_lut[81] = 8'hF4; sin_lut[82] = 8'hF2; sin_lut[83] = 8'hF1;
        sin_lut[84] = 8'hF0; sin_lut[85] = 8'hEE; sin_lut[86] = 8'hEC; sin_lut[87] = 8'hEB;
        sin_lut[88] = 8'hE9; sin_lut[89] = 8'hE7; sin_lut[90] = 8'hE6; sin_lut[91] = 8'hE4;
        sin_lut[92] = 8'hE2; sin_lut[93] = 8'hE0; sin_lut[94] = 8'hDE; sin_lut[95] = 8'hDB;
        sin_lut[96] = 8'hD9; sin_lut[97] = 8'hD7; sin_lut[98] = 8'hD5; sin_lut[99] = 8'hD2;
        sin_lut[100] = 8'hD0; sin_lut[101] = 8'hCE; sin_lut[102] = 8'hCB; sin_lut[103] = 8'hC9;
        sin_lut[104] = 8'hC6; sin_lut[105] = 8'hC3; sin_lut[106] = 8'hC1; sin_lut[107] = 8'hBE;
        sin_lut[108] = 8'hBB; sin_lut[109] = 8'hB9; sin_lut[110] = 8'hB6; sin_lut[111] = 8'hB3;
        sin_lut[112] = 8'hB0; sin_lut[113] = 8'hAD; sin_lut[114] = 8'hAA; sin_lut[115] = 8'hA7;
        sin_lut[116] = 8'hA4; sin_lut[117] = 8'hA1; sin_lut[118] = 8'h9E; sin_lut[119] = 8'h9B;
        sin_lut[120] = 8'h98; sin_lut[121] = 8'h95; sin_lut[122] = 8'h92; sin_lut[123] = 8'h8F;
        sin_lut[124] = 8'h8C; sin_lut[125] = 8'h89; sin_lut[126] = 8'h86; sin_lut[127] = 8'h83;
        sin_lut[128] = 8'h80; sin_lut[129] = 8'h7C; sin_lut[130] = 8'h79; sin_lut[131] = 8'h76;
        sin_lut[132] = 8'h73; sin_lut[133] = 8'h70; sin_lut[134] = 8'h6D; sin_lut[135] = 8'h6A;
        sin_lut[136] = 8'h67; sin_lut[137] = 8'h64; sin_lut[138] = 8'h61; sin_lut[139] = 8'h5E;
        sin_lut[140] = 8'h5B; sin_lut[141] = 8'h58; sin_lut[142] = 8'h55; sin_lut[143] = 8'h52;
        sin_lut[144] = 8'h4F; sin_lut[145] = 8'h4C; sin_lut[146] = 8'h49; sin_lut[147] = 8'h46;
        sin_lut[148] = 8'h44; sin_lut[149] = 8'h41; sin_lut[150] = 8'h3E; sin_lut[151] = 8'h3C;
        sin_lut[152] = 8'h39; sin_lut[153] = 8'h36; sin_lut[154] = 8'h34; sin_lut[155] = 8'h31;
        sin_lut[156] = 8'h2F; sin_lut[157] = 8'h2D; sin_lut[158] = 8'h2A; sin_lut[159] = 8'h28;
        sin_lut[160] = 8'h26; sin_lut[161] = 8'h24; sin_lut[162] = 8'h21; sin_lut[163] = 8'h1F;
        sin_lut[164] = 8'h1D; sin_lut[165] = 8'h1B; sin_lut[166] = 8'h19; sin_lut[167] = 8'h18;
        sin_lut[168] = 8'h16; sin_lut[169] = 8'h14; sin_lut[170] = 8'h13; sin_lut[171] = 8'h11;
        sin_lut[172] = 8'h0F; sin_lut[173] = 8'h0E; sin_lut[174] = 8'h0D; sin_lut[175] = 8'h0B;
        sin_lut[176] = 8'h0A; sin_lut[177] = 8'h09; sin_lut[178] = 8'h08; sin_lut[179] = 8'h07;
        sin_lut[180] = 8'h06; sin_lut[181] = 8'h05; sin_lut[182] = 8'h04; sin_lut[183] = 8'h04;
        sin_lut[184] = 8'h03; sin_lut[185] = 8'h02; sin_lut[186] = 8'h02; sin_lut[187] = 8'h01;
        sin_lut[188] = 8'h01; sin_lut[189] = 8'h01; sin_lut[190] = 8'h01; sin_lut[191] = 8'h01;
        sin_lut[192] = 8'h01; sin_lut[193] = 8'h01; sin_lut[194] = 8'h01; sin_lut[195] = 8'h01;
        sin_lut[196] = 8'h01; sin_lut[197] = 8'h02; sin_lut[198] = 8'h02; sin_lut[199] = 8'h03;
        sin_lut[200] = 8'h04; sin_lut[201] = 8'h04; sin_lut[202] = 8'h05; sin_lut[203] = 8'h06;
        sin_lut[204] = 8'h07; sin_lut[205] = 8'h08; sin_lut[206] = 8'h09; sin_lut[207] = 8'h0A;
        sin_lut[208] = 8'h0B; sin_lut[209] = 8'h0D; sin_lut[210] = 8'h0E; sin_lut[211] = 8'h0F;
        sin_lut[212] = 8'h11; sin_lut[213] = 8'h13; sin_lut[214] = 8'h14; sin_lut[215] = 8'h16;
        sin_lut[216] = 8'h18; sin_lut[217] = 8'h19; sin_lut[218] = 8'h1B; sin_lut[219] = 8'h1D;
        sin_lut[220] = 8'h1F; sin_lut[221] = 8'h21; sin_lut[222] = 8'h24; sin_lut[223] = 8'h26;
        sin_lut[224] = 8'h28; sin_lut[225] = 8'h2A; sin_lut[226] = 8'h2D; sin_lut[227] = 8'h2F;
        sin_lut[228] = 8'h31; sin_lut[229] = 8'h34; sin_lut[230] = 8'h36; sin_lut[231] = 8'h39;
        sin_lut[232] = 8'h3C; sin_lut[233] = 8'h3E; sin_lut[234] = 8'h41; sin_lut[235] = 8'h44;
        sin_lut[236] = 8'h46; sin_lut[237] = 8'h49; sin_lut[238] = 8'h4C; sin_lut[239] = 8'h4F;
        sin_lut[240] = 8'h52; sin_lut[241] = 8'h55; sin_lut[242] = 8'h58; sin_lut[243] = 8'h5B;
        sin_lut[244] = 8'h5E; sin_lut[245] = 8'h61; sin_lut[246] = 8'h64; sin_lut[247] = 8'h67;
        sin_lut[248] = 8'h6A; sin_lut[249] = 8'h6D; sin_lut[250] = 8'h70; sin_lut[251] = 8'h73;
        sin_lut[252] = 8'h76; sin_lut[253] = 8'h79; sin_lut[254] = 8'h7C; sin_lut[255] = 8'h7F;
    end

    // --- Playback Control ---
    reg playing = 0;
    reg [13:0] playback_cnt;
    always @( posedge sample_tick) begin
        if (reset) begin
            playing <= 0;
            playback_cnt <= 0;
            
        end else if (sw == 2'b01 || sw == 2'b10) begin
            
            if (playback_cnt == 14'd15999) begin
                playing <= 0;
                
            end else begin
                playback_cnt <= playback_cnt + 1;
                playing <= 1;
            end
            
        end else if (sw == 2'b00 || sw == 2'b11) begin
            playing <= 0;
            playback_cnt <= 0;
        end
    end
    
    
        
    

    // --- Frequency Step Modulation ---
    wire [15:0] freq_step;
    freq_control freq_ctrl (
        .clk(clk),
        .playing(playing),
        .sw(sw),
        .playback_cnt(playback_cnt),
        .freq_step(freq_step)
    );

    // --- Phase Accumulator for Frequency Control ---
    reg [15:0] phase_acc = 0;
    wire [7:0] lut_addr = phase_acc[15:8];
    always @(posedge sample_tick) begin
        if (reset)
            phase_acc <= 0;
        else if (playing)
            phase_acc <= phase_acc + freq_step;
    end

    // --- Generate Sample (Fixed Maximum Volume) ---
    wire [7:0] raw_sample = sin_lut[lut_addr];
    wire [15:0] modulated_sample = raw_sample * 8'd255; // 最大音量
    wire [7:0] sample = playing ? modulated_sample[15:8] : 8'd0;

    // --- PWM Generator (8-bit resolution) ---
    reg [7:0] pwm_cnt = 0;
    always @(posedge clk) begin
        if (reset)
            pwm_cnt <= 0;
        else if (pwm_cnt == 255)
            pwm_cnt <= 0;
        else
            pwm_cnt <= pwm_cnt + 1;
    end
    assign pwm_out = (pwm_cnt < sample);

    // --- GPIO Control ---
    assign gain = 1'b0;       // 高音量
    assign shutdown_n = 1'b1; // 使能

endmodule
///////////////////////////////////////////////////////////////////
module freq_control (
    input wire clk,              
    input wire [1:0] sw,         
    input wire playing,          
    input wire [13:0] playback_cnt, 
    output reg [15:0] freq_step  
);
    always @(posedge clk) begin
        if (playing)
            case (sw)
                2'b01: begin
                    if (playback_cnt <= 16'd1600)
                        freq_step <= 16'd2143; // 523 Hz
                    else if (playback_cnt <= 16'd3200)
                        freq_step <= 16'd2700; // 659 Hz
                    else if (playback_cnt <= 14'd4800)
                        freq_step <= 16'd3210; // 784 Hz
                    else
                        freq_step <= 16'd4286; // 1046 Hz
                end
                2'b10: begin
                    if (playback_cnt <= 16'd3200)
                        freq_step <= 16'd2429; // 523 Hz
                    else if (playback_cnt <= 16'd4800)
                        freq_step <= 16'd1800; // 659 Hz
                    else
                        freq_step <= 16'd1254; // 1046 Hz
                end
                default:
                    freq_step <= 16'd0;
            endcase
        else 
            freq_step <= 16'd0;
    end
endmodule

////////////////////////////////////////////////////////////
module flexible_clock_divider(
    input basys_clock,
    input [31:0]m,
    output reg my_slow_clock
    );
    
    reg [31:0] COUNT;
    
    initial begin
        COUNT = 0;
        my_slow_clock = 1;
    end
    
    always @ (posedge basys_clock) begin
        COUNT <= ( COUNT == m ) ? 0 : COUNT + 1;
        my_slow_clock <= ( COUNT == m ) ? ~my_slow_clock : my_slow_clock;
    end
    
endmodule
